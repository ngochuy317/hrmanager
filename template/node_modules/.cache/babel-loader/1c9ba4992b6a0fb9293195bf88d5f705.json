{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\anhdu\\\\Desktop\\\\HrManager\\\\appmanager\\\\template\\\\src\\\\components\\\\table\\\\TableEmployee.jsx\",\n    _s = $RefreshSig$();\n\nimport PropTypes from 'prop-types';\nimport { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nTableEmployee.propTypes = {\n  datas: PropTypes.array,\n  columns: PropTypes.arrayOf(PropTypes.shape({\n    titel: PropTypes.string,\n    dataIndex: PropTypes.string,\n    key: PropTypes.string,\n    render: PropTypes.func\n  })),\n  onCheckBox: PropTypes.func\n};\nTableEmployee.defaultProps = {\n  datas: [],\n  columns: [{\n    title: '',\n    dataIndex: '',\n    key: 1,\n    render: null\n  }],\n  onCheckBox: null\n};\n\nfunction TableEmployee(props) {\n  _s();\n\n  const {\n    datas,\n    columns,\n    onCheckBox\n  } = props;\n  const [checkAll, setCheckAll] = useState(false);\n\n  function handleCheckBoxChange(datas) {\n    if (onCheckBox) {\n      onCheckBox(datas);\n    }\n  }\n\n  useEffect(() => {\n    const handleCheckBoxChange = () => {\n      if (datas.every(value => {\n        return value.isCheck === true;\n      })) {\n        setCheckAll(true);\n      } else setCheckAll(false);\n    };\n\n    handleCheckBoxChange();\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"align-middle overflow-x-auto border first-letter rounded-t-md\",\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"min-w-full divide-y divide-gray-200\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        className: \"bg-gray-100\",\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            className: \"px-4 py-1.5 text-left text-xs font-medium  uppercase tracking-wider\",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              className: \"accent-blue-500\",\n              checked: checkAll,\n              onChange: e => {\n                let nowCheck = e.target.checked;\n                handleCheckBoxChange(datas.map(data => {\n                  data.isCheck = nowCheck;\n                  return data;\n                }));\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 25\n          }, this), columns.map(column => {\n            return /*#__PURE__*/_jsxDEV(\"th\", {\n              className: \"px-4 py-1.5 text-left text-xs text-gray-500 uppercase tracking-wider\",\n              children: column.title\n            }, column.key, false, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 33\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        className: \"divide-y divide-gray-200\",\n        children: datas.map(data => {\n          return /*#__PURE__*/_jsxDEV(\"tr\", {\n            className: \"h-full\",\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"px-4 py-1.5 whitespace-nowrap\",\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                className: \"accent-blue-500\",\n                checked: data.isCheck,\n                onChange: e => {\n                  let nowCheck = e.target.checked;\n                  handleCheckBoxChange(datas.map(dataNew => {\n                    if (data.id === dataNew.id) {\n                      dataNew.isCheck = nowCheck;\n                    }\n\n                    return dataNew;\n                  }));\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 73,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 33\n            }, this), columns.map(col => {\n              if (col.render) return /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"px-4 py-2 whitespace-nowrap\",\n                children: col.render(data)\n              }, col.key, false, {\n                fileName: _jsxFileName,\n                lineNumber: 90,\n                columnNumber: 41\n              }, this);\n              return /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"px-4 py-1.5 whitespace-nowrap text-gray-500\",\n                children: data[col.dataIndex]\n              }, col.key, false, {\n                fileName: _jsxFileName,\n                lineNumber: 95,\n                columnNumber: 41\n              }, this);\n            })]\n          }, data.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 29\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n}\n\n_s(TableEmployee, \"HWKFBVS2Rw7a2o+6RGuEHoqDTHw=\");\n\n_c = TableEmployee;\nTableEmployee.propTypes = {};\nexport default TableEmployee;\n\nvar _c;\n\n$RefreshReg$(_c, \"TableEmployee\");","map":{"version":3,"sources":["C:/Users/anhdu/Desktop/HrManager/appmanager/template/src/components/table/TableEmployee.jsx"],"names":["PropTypes","useState","useEffect","TableEmployee","propTypes","datas","array","columns","arrayOf","shape","titel","string","dataIndex","key","render","func","onCheckBox","defaultProps","title","props","checkAll","setCheckAll","handleCheckBoxChange","every","value","isCheck","e","nowCheck","target","checked","map","data","column","dataNew","id","col"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types'\r\nimport { useState, useEffect } from 'react'\r\n\r\nTableEmployee.propTypes = {\r\n    datas: PropTypes.array,\r\n    columns: PropTypes.arrayOf(PropTypes.shape({\r\n        titel: PropTypes.string,\r\n        dataIndex: PropTypes.string,\r\n        key: PropTypes.string,\r\n        render: PropTypes.func,\r\n    })),\r\n    onCheckBox: PropTypes.func,\r\n};\r\nTableEmployee.defaultProps = {\r\n    datas: [],\r\n    columns: [{\r\n        title: '',\r\n        dataIndex: '',\r\n        key: 1,\r\n        render: null\r\n    }],\r\n    onCheckBox: null\r\n}\r\n\r\nfunction TableEmployee(props) {\r\n    const { datas, columns, onCheckBox } = props;\r\n    const [checkAll, setCheckAll] = useState(false);\r\n\r\n    function handleCheckBoxChange(datas) {\r\n        if (onCheckBox) {\r\n            onCheckBox(datas);\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        const handleCheckBoxChange = () => {\r\n            if (datas.every((value) => { return value.isCheck === true })) {\r\n                setCheckAll(true)\r\n            } else setCheckAll(false)\r\n        }\r\n        handleCheckBoxChange()\r\n    })\r\n    return (\r\n        <div className=\"align-middle overflow-x-auto border first-letter rounded-t-md\">\r\n            <table className=\"min-w-full divide-y divide-gray-200\">\r\n                < thead className=\"bg-gray-100\">\r\n                    <tr>\r\n                        <th className=\"px-4 py-1.5 text-left text-xs font-medium  uppercase tracking-wider\">\r\n                            <input type=\"checkbox\" className=\"accent-blue-500\"\r\n                                checked={checkAll}\r\n                                onChange={e => {\r\n                                    let nowCheck = (e.target.checked)\r\n                                    handleCheckBoxChange(datas.map(data => {\r\n                                        data.isCheck = nowCheck\r\n                                        return data\r\n                                    }))\r\n                                }}\r\n                            />\r\n                        </th>\r\n                        {columns.map(column => {\r\n                            return (\r\n                                <th key={column.key} className=\"px-4 py-1.5 text-left text-xs text-gray-500 uppercase tracking-wider\">\r\n                                    {column.title}\r\n                                </th>\r\n                            )\r\n                        })}\r\n                    </tr>\r\n                </thead>\r\n                <tbody className=\"divide-y divide-gray-200\">\r\n                    {datas.map(data => {\r\n                        return (\r\n                            <tr key={data.id} className=\"h-full\">\r\n                                <td className=\"px-4 py-1.5 whitespace-nowrap\">\r\n                                    <input type=\"checkbox\" className=\"accent-blue-500\"\r\n                                        checked={data.isCheck}\r\n                                        onChange={(e) => {\r\n                                            let nowCheck = e.target.checked\r\n                                            handleCheckBoxChange(\r\n                                                datas.map(dataNew => {\r\n                                                    if (data.id === dataNew.id) {\r\n                                                        dataNew.isCheck = nowCheck\r\n                                                    }\r\n                                                    return dataNew\r\n                                                })\r\n                                            )\r\n                                        }}\r\n                                    />\r\n                                </td>\r\n                                {columns.map(col => {\r\n                                    if (col.render) return (\r\n                                        <td key={col.key} className=\"px-4 py-2 whitespace-nowrap\">\r\n                                            {col.render(data)}\r\n                                        </td>\r\n                                    )\r\n                                    return (\r\n                                        <td key={col.key} className=\"px-4 py-1.5 whitespace-nowrap text-gray-500\">\r\n                                            {data[col.dataIndex]}\r\n                                        </td>\r\n                                    )\r\n                                })}\r\n                            </tr>\r\n                        )\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\nTableEmployee.propTypes = {}\r\n\r\nexport default TableEmployee\r\n"]},"metadata":{},"sourceType":"module"}