{"ast":null,"code":"import{useEffect,useState,Fragment}from'react';import{withAlert}from\"react-alert\";import{connect,useSelector}from'react-redux';import{useAlert}from'react-alert';import{jsx as _jsx}from\"react/jsx-runtime\";function Alerts(props){var alertNew=useSelector(function(state){return state.alert;});console.log(alertNew);var alert=useAlert();useEffect(function(){if(alertNew.msg!==null)alert.show(alertNew.msg,{type:alertNew.type});},[alertNew]);return/*#__PURE__*/_jsx(Fragment,{});}var mapStateToProps=function mapStateToProps(state){return{alertRedux:state.alert};};export default connect(mapStateToProps)(withAlert()(Alerts));","map":{"version":3,"sources":["C:/Users/anhdu/OneDrive/Desktop/HrManager/hrmanager/template/src/components/layout/Alerts.jsx"],"names":["useEffect","useState","Fragment","withAlert","connect","useSelector","useAlert","Alerts","props","alertNew","state","alert","console","log","msg","show","type","mapStateToProps","alertRedux"],"mappings":"AAAA,OAAQA,SAAR,CAAmBC,QAAnB,CAA6BC,QAA7B,KAA6C,OAA7C,CACA,OAASC,SAAT,KAA0B,aAA1B,CACA,OAASC,OAAT,CAAkBC,WAAlB,KAAqC,aAArC,CAEA,OAASC,QAAT,KAAyB,aAAzB,C,2CAEA,QAASC,CAAAA,MAAT,CAAgBC,KAAhB,CAAuB,CACnB,GAAMC,CAAAA,QAAQ,CAAGJ,WAAW,CAAC,SAAAK,KAAK,QAAIA,CAAAA,KAAK,CAACC,KAAV,EAAN,CAA5B,CACAC,OAAO,CAACC,GAAR,CAAYJ,QAAZ,EACA,GAAME,CAAAA,KAAK,CAAGL,QAAQ,EAAtB,CACAN,SAAS,CAAC,UAAM,CACZ,GAAGS,QAAQ,CAACK,GAAT,GAAiB,IAApB,CAA0BH,KAAK,CAACI,IAAN,CAAWN,QAAQ,CAACK,GAApB,CAAyB,CAACE,IAAI,CAAEP,QAAQ,CAACO,IAAhB,CAAzB,EAC7B,CAFQ,CAEP,CAACP,QAAD,CAFO,CAAT,CAGF,mBACE,KAAC,QAAD,IADF,CAGD,CACD,GAAMQ,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACP,KAAD,QAAY,CAChCQ,UAAU,CAAER,KAAK,CAACC,KADc,CAAZ,EAAxB,CAGA,cAAeP,CAAAA,OAAO,CAACa,eAAD,CAAP,CAAyBd,SAAS,GAAGI,MAAH,CAAlC,CAAf","sourcesContent":["import {useEffect, useState, Fragment } from 'react'\r\nimport { withAlert } from \"react-alert\"\r\nimport { connect, useSelector } from 'react-redux'\r\nimport PropTypes from 'prop-types'\r\nimport { useAlert } from 'react-alert'\r\n\r\nfunction Alerts(props) {\r\n    const alertNew = useSelector(state => state.alert) \r\n    console.log(alertNew)\r\n    const alert = useAlert()\r\n    useEffect(() => {\r\n        if(alertNew.msg !== null) alert.show(alertNew.msg, {type: alertNew.type})\r\n    },[alertNew])\r\n  return (\r\n    <Fragment/>\r\n  )\r\n}\r\nconst mapStateToProps = (state) => ({\r\n    alertRedux: state.alert\r\n})\r\nexport default connect(mapStateToProps)(withAlert()(Alerts));\r\n"]},"metadata":{},"sourceType":"module"}