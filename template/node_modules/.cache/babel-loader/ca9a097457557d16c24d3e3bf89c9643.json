{"ast":null,"code":"import axios from \"axios\";\nimport queryString from \"query-string\";\nconst REACT_APP_API_URL = \"http://127.0.0.1:8000/api/\";\nconst axiosClient = axios.create({\n  baseURL: REACT_APP_API_URL,\n  headers: {\n    \"content-type\": \"application/json\"\n  },\n  paramsSerializerlizer: params => queryString.stringify(params)\n});\naxiosClient.interceptors.request.use(async config => {\n  //Handle token here ..\n  return config;\n});\naxiosClient.interceptors.response.use(response => {\n  if (response && response.data) {\n    return response.data;\n  }\n\n  return response;\n}, error => {\n  //handle error here ..\n  throw error;\n});\nexport default axiosClient;","map":{"version":3,"sources":["C:/Users/anhdu/OneDrive/Desktop/HrManager/hrmanager/template/src/api/axiosClient.js"],"names":["axios","queryString","REACT_APP_API_URL","axiosClient","create","baseURL","headers","paramsSerializerlizer","params","stringify","interceptors","request","use","config","response","data","error"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,cAAxB;AAEA,MAAMC,iBAAiB,GAAG,4BAA1B;AAEA,MAAMC,WAAW,GAAGH,KAAK,CAACI,MAAN,CAAa;AAC/BC,EAAAA,OAAO,EAAEH,iBADsB;AAE/BI,EAAAA,OAAO,EAAE;AACP,oBAAgB;AADT,GAFsB;AAK/BC,EAAAA,qBAAqB,EAAGC,MAAD,IAAYP,WAAW,CAACQ,SAAZ,CAAsBD,MAAtB;AALJ,CAAb,CAApB;AAQAL,WAAW,CAACO,YAAZ,CAAyBC,OAAzB,CAAiCC,GAAjC,CAAqC,MAAOC,MAAP,IAAkB;AACrD;AACA,SAAOA,MAAP;AACD,CAHD;AAKAV,WAAW,CAACO,YAAZ,CAAyBI,QAAzB,CAAkCF,GAAlC,CACGE,QAAD,IAAc;AACZ,MAAIA,QAAQ,IAAIA,QAAQ,CAACC,IAAzB,EAA+B;AAC7B,WAAOD,QAAQ,CAACC,IAAhB;AACD;;AACD,SAAOD,QAAP;AACD,CANH,EAOGE,KAAD,IAAW;AACT;AACA,QAAMA,KAAN;AACD,CAVH;AAaA,eAAeb,WAAf","sourcesContent":["import axios from \"axios\";\r\nimport queryString from \"query-string\";\r\n\r\nconst REACT_APP_API_URL = \"http://127.0.0.1:8000/api/\";\r\n\r\nconst axiosClient = axios.create({\r\n  baseURL: REACT_APP_API_URL,\r\n  headers: {\r\n    \"content-type\": \"application/json\",\r\n  },\r\n  paramsSerializerlizer: (params) => queryString.stringify(params),\r\n});\r\n\r\naxiosClient.interceptors.request.use(async (config) => {\r\n  //Handle token here ..\r\n  return config;\r\n});\r\n\r\naxiosClient.interceptors.response.use(\r\n  (response) => {\r\n    if (response && response.data) {\r\n      return response.data;\r\n    }\r\n    return response;\r\n  },\r\n  (error) => {\r\n    //handle error here ..\r\n    throw error;\r\n  }\r\n);\r\n\r\nexport default axiosClient;\r\n"]},"metadata":{},"sourceType":"module"}