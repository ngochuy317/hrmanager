{"ast":null,"code":"import { USER_LOADED, USER_LOADING, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT_SUCCESS, REGISTER_FAIL, REGISTER_SUCCESS } from './types';\nimport userAPI from '../../api/userApi';\nimport jwtDecode from 'jwt-decode'; //signUp\n\nexport const loginUser = user => dispatch => {\n  userAPI.login(user).then(response => {\n    localStorage.setItem(\"access_token\", response['jwt_token']);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: response\n    });\n  }).catch(error => {\n    dispatch({\n      type: LOGIN_FAIL,\n      payload: error.message\n    });\n  });\n};\nexport const loadUser = () => (dispatch, getState) => {\n  const token = getState().auth.token;\n\n  if (token) {\n    const user = jwtDecode(token);\n    dispatch({\n      type: USER_LOADED,\n      payload: {\n        token,\n        user\n      }\n    });\n  } else {\n    dispatch({\n      type: USER_LOADING,\n      payload: null\n    });\n  }\n};\nexport const singOut = () => (dispatch, getState) => {};","map":{"version":3,"sources":["C:/Users/anhdu/OneDrive/Desktop/HrManager/hrmanager/template/src/redux/actions/authActions.js"],"names":["USER_LOADED","USER_LOADING","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT_SUCCESS","REGISTER_FAIL","REGISTER_SUCCESS","userAPI","jwtDecode","loginUser","user","dispatch","login","then","response","localStorage","setItem","type","payload","catch","error","message","loadUser","getState","token","auth","singOut"],"mappings":"AAAA,SACIA,WADJ,EAEIC,YAFJ,EAGIC,UAHJ,EAIIC,aAJJ,EAKIC,UALJ,EAMIC,cANJ,EAOIC,aAPJ,EAQIC,gBARJ,QASO,SATP;AAUA,OAAOC,OAAP,MAAoB,mBAApB;AACA,OAAOC,SAAP,MAAsB,YAAtB,C,CACA;;AACA,OAAO,MAAMC,SAAS,GAAIC,IAAD,IAAWC,QAAD,IAAc;AAC7CJ,EAAAA,OAAO,CAACK,KAAR,CAAcF,IAAd,EAAoBG,IAApB,CACIC,QAAQ,IAAI;AACRC,IAAAA,YAAY,CAACC,OAAb,CAAqB,cAArB,EAAqCF,QAAQ,CAAC,WAAD,CAA7C;AACAH,IAAAA,QAAQ,CAAC;AACLM,MAAAA,IAAI,EAAEf,aADD;AAELgB,MAAAA,OAAO,EAAEJ;AAFJ,KAAD,CAAR;AAIH,GAPL,EAQEK,KARF,CAQQC,KAAK,IAAI;AACbT,IAAAA,QAAQ,CAAC;AACLM,MAAAA,IAAI,EAAEd,UADD;AAELe,MAAAA,OAAO,EAAEE,KAAK,CAACC;AAFV,KAAD,CAAR;AAIH,GAbD;AAcH,CAfM;AAiBP,OAAO,MAAMC,QAAQ,GAAG,MAAM,CAACX,QAAD,EAAWY,QAAX,KAAwB;AAClD,QAAMC,KAAK,GAAGD,QAAQ,GAAGE,IAAX,CAAgBD,KAA9B;;AACA,MAAGA,KAAH,EAAS;AACL,UAAMd,IAAI,GAAGF,SAAS,CAACgB,KAAD,CAAtB;AACAb,IAAAA,QAAQ,CAAC;AACLM,MAAAA,IAAI,EAAElB,WADD;AAELmB,MAAAA,OAAO,EAAE;AAACM,QAAAA,KAAD;AAAOd,QAAAA;AAAP;AAFJ,KAAD,CAAR;AAIH,GAND,MAMO;AACHC,IAAAA,QAAQ,CAAC;AACTM,MAAAA,IAAI,EAAEjB,YADG;AAETkB,MAAAA,OAAO,EAAE;AAFA,KAAD,CAAR;AAGD;AAEN,CAdM;AAgBP,OAAO,MAAMQ,OAAO,GAAG,MAAM,CAACf,QAAD,EAAWY,QAAX,KAAuB,CAEnD,CAFM","sourcesContent":["import {\r\n    USER_LOADED,\r\n    USER_LOADING,\r\n    AUTH_ERROR,\r\n    LOGIN_SUCCESS,\r\n    LOGIN_FAIL,\r\n    LOGOUT_SUCCESS,\r\n    REGISTER_FAIL,\r\n    REGISTER_SUCCESS\r\n} from './types'\r\nimport userAPI from '../../api/userApi'\r\nimport jwtDecode from 'jwt-decode'\r\n//signUp\r\nexport const loginUser = (user) => (dispatch) => {\r\n    userAPI.login(user).then(\r\n        response => {\r\n            localStorage.setItem(\"access_token\", response['jwt_token'])\r\n            dispatch({\r\n                type: LOGIN_SUCCESS,\r\n                payload: response\r\n            })\r\n        }\r\n    ).catch(error => {\r\n        dispatch({\r\n            type: LOGIN_FAIL,\r\n            payload: error.message\r\n        })\r\n    })\r\n}\r\n\r\nexport const loadUser = () => (dispatch, getState) => {\r\n    const token = getState().auth.token\r\n    if(token){\r\n        const user = jwtDecode(token)\r\n        dispatch({\r\n            type: USER_LOADED,\r\n            payload: {token,user}\r\n        })\r\n    } else {\r\n        dispatch({\r\n        type: USER_LOADING,\r\n        payload: null,\r\n    })}\r\n\r\n}\r\n\r\nexport const singOut = () => (dispatch, getState) =>{\r\n    \r\n}"]},"metadata":{},"sourceType":"module"}